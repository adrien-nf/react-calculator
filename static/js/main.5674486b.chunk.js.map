{"version":3,"sources":["App.js","reportWebVitals.js","index.js","Calculator/Calculator.js"],"names":["App","className","Calculator","Date","getFullYear","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","keys","useState","calculatorText","setCalculatorText","pressKey","key","previousText","pressedEqual","r","eval","toString","substr","map","line","i","j","type","onClick","value"],"mappings":"sNAoBeA,MAjBf,WACE,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,QAAd,2BAEF,qBAAKA,UAAU,SAAf,SACE,cAACC,EAAA,EAAD,MAEF,sBAAKD,UAAU,SAAf,UACE,uBAAMA,UAAU,OAAhB,mBAA2B,IAAIE,MAAQC,cAAvC,mBADF,OAEE,mBAAGC,KAAK,YAAYJ,UAAU,OAA9B,qCCFOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,q2BCbMc,KAAO,CACT,CACI,IACA,IACA,IACA,KAEJ,CACI,IACA,IACA,IACA,KAEJ,CACI,IACA,IACA,IACA,KAEJ,CACI,IACA,IACA,IACA,MAIO,SAASlB,aAEpB,cAA4CmB,oDAAS,WAArD,uLAAOC,eAAP,cAAuBC,kBAAvB,cAEMC,SAAW,SAACC,GACd,GAAuB,YAAnBH,iBACAC,kBAAkB,IACN,MAARE,GAGR,GAAY,MAARA,EAIJ,GAAY,MAARA,EAAJ,CAIA,IAAIC,EAAmC,UAAnBJ,gBAAiD,YAAnBA,eAA+B,GAAKA,eACtFC,kBAAkBG,GAAkC,KAAjBA,GAAwC,MAAjBA,GAAiC,MAARD,EAAmBA,EAAL,UAJ7FF,kBAAkB,SAJlBI,gBAWFA,aAAe,SAAfA,eACF,IAAIC,EAAI,KACR,IACIA,EAAIC,KAAKP,gBACTC,kBAAkBK,GAAKA,EAAEE,YAC3B,eACEP,kBAAkB,WAI1B,OACI,mEAAKtB,UAAU,wBAAf,UACI,kEAAKA,UAAU,oBAAf,SACI,kEAAKA,UAAU,4BAAf,SACI,4EAAOqB,gBAAkBA,eAAeS,QAAUT,eAAeS,OAAO,EAAG,UAGnF,kEAAK9B,UAAU,kBAAf,SAEQmB,KAAKY,KAAI,SAACC,EAAMC,GAAP,OACL,kEAAKjC,UAAU,kBAAf,SAEQgC,EAAKD,KAAI,SAACP,EAAKU,GAAN,OACL,oEAAOC,KAAK,SAASnC,UAAU,oBAA4BoC,QAAS,kBAAMb,SAASC,IAAMa,MAAOb,GAAxCU,OAH9BD,c","file":"static/js/main.5674486b.chunk.js","sourcesContent":["import './App.css';\nimport Calculator from './Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"background\">\n      <div className=\"top\">\n        <h1 className=\"title\">Calculator.</h1>\n      </div>\n      <div className=\"center\">\n        <Calculator />\n      </div>\n      <div className=\"bottom\">\n        <span className=\"link\">Â© {(new Date()).getFullYear()} Adrien N. F.</span>&nbsp;\n        <a href=\"/homepage\" className=\"link\">Back to Homepage</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst keys = [\r\n    [\r\n        '1',\r\n        '2',\r\n        '3',\r\n        '+'\r\n    ],\r\n    [\r\n        '4',\r\n        '5',\r\n        '6',\r\n        '-'\r\n    ],\r\n    [\r\n        '7',\r\n        '8',\r\n        '9',\r\n        '*'\r\n    ],\r\n    [\r\n        'C',\r\n        '0',\r\n        '=',\r\n        '/'\r\n    ],\r\n]\r\n\r\nexport default function Calculator() {\r\n\r\n    const [calculatorText, setCalculatorText] = useState(\"WELCOME\")\r\n\r\n    const pressKey = (key) => {\r\n        if (calculatorText === \"WELCOME\") {\r\n            setCalculatorText(\"\");\r\n            if (key === \"=\")\r\n                return;\r\n        }\r\n        if (key === '=') {\r\n            pressedEqual();\r\n            return;\r\n        }\r\n        if (key === 'C') {\r\n            setCalculatorText(\"\");\r\n            return;\r\n        }\r\n        let previousText = (calculatorText === \"ERROR\" || calculatorText === \"WELCOME\" ? \"\" : calculatorText);\r\n        setCalculatorText(previousText + ((previousText === \"\" || previousText === '0') && key === '0' ? \"\" : key));\r\n    }\r\n\r\n    const pressedEqual = () => {\r\n        let r = null;\r\n        try {\r\n            r = eval(calculatorText)\r\n            setCalculatorText(r && r.toString());\r\n        } catch {\r\n            setCalculatorText(\"ERROR\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"calculator-background\">\r\n            <div className=\"calculator-screen\">\r\n                <div className=\"calculator-screen-content\">\r\n                    <span>{calculatorText && calculatorText.substr && calculatorText.substr(0, 11)}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"calculator-body\">\r\n                {\r\n                    keys.map((line, i) => (\r\n                        <div className=\"calculator-line\" key={i}>\r\n                            {\r\n                                line.map((key, j) => (\r\n                                    <input type=\"button\" className=\"calculator-button\" key={j} onClick={() => pressKey(key)} value={key} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}